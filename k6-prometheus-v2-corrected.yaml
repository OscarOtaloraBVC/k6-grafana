apiVersion: apps/v1
kind: Deployment
metadata:
  name: k6-prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k6-prometheus
  template:
    metadata:
      labels:
        app: k6-prometheus
    spec:
      containers:
      - name: k6
        image: grafana/k6:latest
        command: ["sh", "-c"]
        args:
          - |
            export K6_PROMETHEUS_RW_SERVER_URL=http://localhost:9090/api/v1/write
            export K6_PROMETHEUS_RW_TREND_STATS="p(95),p(50),min,max,avg"
            k6 run --out experimental-prometheus-rw /scripts/01_harbor_pull_test_grafana.js
            sleep infinity
        ports:
          - containerPort: 5656
            name: metrics
        volumeMounts:
        - name: k6-scripts
          mountPath: /scripts
          
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: k6-scripts
        configMap:
          name: k6-scripts
      - name: prometheus-config
        configMap:
          name: prometheus-config

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-scripts
data:
  01_harbor_pull_test_grafana.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    import { Counter, Trend } from 'k6/metrics';

    const successfulPushes = new Counter('harbor_successful_pushes_total');
    const failedPushes = new Counter('harbor_failed_pushes_total');
    const pushDuration = new Trend('harbor_push_duration_ms');

    export const options = {
      scenarios: {
        constant_load: {
          executor: 'constant-arrival-rate',
          rate: 10,
          timeUnit: '1s',
          duration: '5m',
          preAllocatedVUs: 10,
          maxVUs: 50,
        },
      },
      tags: {
        testid: __ENV.testid,
      },
      ext: {
        loadimpact: {
          name: 'Harbor Push Test'
        }
      }
    };

    function simulateHarborPush() {
      const start = Date.now();
      const testid = __ENV.testid;
      
      const url = 'http://harbor-service/api/v2.0/projects';
      const payload = JSON.stringify({
        project_name: `test-project-${__VU}-${__ITER}`,
      });
      
      const params = {
        headers: {
          'Content-Type': 'application/json',
        },
        tags: { testid: testid },
      };
      
      const res = http.post(url, payload, params);
      const duration = Date.now() - start;
      
      pushDuration.add(duration, { testid: testid });
      
      if (res.status === 201) {
        successfulPushes.add(1, { testid: testid });
      } else {
        failedPushes.add(1, { testid: testid });
      }
      
      check(res, {
        'status is 201': (r) => r.status === 201,
      });
      
      return duration;
    }

    export default function () {
      simulateHarborPush();
      sleep(0.1);
    }

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    remote_write:
      - url: http://localhost:9090/api/v1/write

    scrape_configs:
      - job_name: 'k6'
        static_configs:
          - targets: ['localhost:5656']
        metrics_path: '/metrics'
        honor_labels: true

---

apiVersion: v1
kind: Service
metadata:
  name: k6-prometheus-service
spec:
  selector:
    app: k6-prometheus
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
      name: prometheus
    - protocol: TCP
      port: 5656
      targetPort: 5656
      name: k6-metrics

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: k6-prometheus-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
  - host: k6-monitoring.yourdomain.com
    http:
      paths:
      - path: /prometheus(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: k6-prometheus-service
            port:
              number: 9090