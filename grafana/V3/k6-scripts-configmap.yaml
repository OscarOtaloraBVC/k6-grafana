# k6-scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-scripts
  namespace: k6-monitoring
data:
  harbor-test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    
    export let options = {
      stages: [
        { duration: '1m', target: 50 },
        { duration: '2m', target: 50 },
        { duration: '1m', target: 25 },
        { duration: '2m', target: 25 },
        { duration: '1m', target: 15 },
        { duration: '2m', target: 15 },
        { duration: '1m', target: 10 },
        { duration: '2m', target: 10 },
        { duration: '1m', target: 0 },
      ],
      thresholds: {
        http_req_duration: ['p(95)<500'],
        http_req_failed: ['rate<0.1'],
      },
    };
    
    const HARBOR_URL = __ENV.HARBOR_URL || 'https://harbor.example.com';
    const USERNAME = __ENV.HARBOR_USER || 'admin';
    const PASSWORD = __ENV.HARBOR_PASS || 'password';
    const PROJECT = __ENV.HARBOR_PROJECT || 'library';
    const IMAGE = __ENV.HARBOR_IMAGE || 'nginx';
    const TAG = __ENV.HARBOR_TAG || 'latest';
    
    function getAuthToken() {
      const url = `${HARBOR_URL}/api/v2.0/users/login`;
      const payload = JSON.stringify({
        principal: USERNAME,
        password: PASSWORD
      });
      
      const params = {
        headers: {
          'Content-Type': 'application/json',
        },
      };
      
      const res = http.post(url, payload, params);
      check(res, {
        'login successful': (r) => r.status === 200,
      });
      
      return res.json().token;
    }
    
    export default function () {
      const token = getAuthToken();
      const manifestUrl = `${HARBOR_URL}/v2/${PROJECT}/${IMAGE}/manifests/${TAG}`;
      
      const params = {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/vnd.docker.distribution.manifest.v2+json'
        },
      };
      
      const res = http.get(manifestUrl, params);
      
      check(res, {
        'pull manifest success': (r) => r.status === 200,
      });
      
      sleep(1);
    }
    
  artifactory-test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    
    export let options = {
      stages: [
        { duration: '1m', target: 50 },
        { duration: '2m', target: 50 },
        { duration: '1m', target: 25 },
        { duration: '2m', target: 25 },
        { duration: '1m', target: 15 },
        { duration: '2m', target: 15 },
        { duration: '1m', target: 10 },
        { duration: '2m', target: 10 },
        { duration: '1m', target: 0 },
      ],
      thresholds: {
        http_req_duration: ['p(95)<500'],
        http_req_failed: ['rate<0.1'],
      },
    };
    
    const ARTIFACTORY_URL = __ENV.ARTIFACTORY_URL || 'https://artifactory.example.com';
    const USERNAME = __ENV.ARTIFACTORY_USER || 'admin';
    const PASSWORD = __ENV.ARTIFACTORY_PASS || 'password';
    const REPO = __ENV.ARTIFACTORY_REPO || 'generic-local';
    const FILE_PATH = __ENV.ARTIFACTORY_FILE || 'test/testfile-30mb.bin';
    
    export default function () {
      const url = `${ARTIFACTORY_URL}/${REPO}/${FILE_PATH}`;
      
      const params = {
        auth: 'basic',
        username: USERNAME,
        password: PASSWORD,
      };
      
      const res = http.get(url, params);
      
      check(res, {
        'download success': (r) => r.status === 200,
        'content length': (r) => r.body.length > 0,
      });
      
      sleep(1);
    }
    
  vault-test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    
    export let options = {
      stages: [
        { duration: '1m', target: 100 },
        { duration: '2m', target: 100 },
        { duration: '1m', target: 50 },
        { duration: '2m', target: 50 },
        { duration: '1m', target: 25 },
        { duration: '2m', target: 25 },
        { duration: '1m', target: 15 },
        { duration: '2m', target: 15 },
        { duration: '1m', target: 0 },
      ],
      thresholds: {
        http_req_duration: ['p(95)<500'],
        http_req_failed: ['rate<0.1'],
      },
    };
    
    const VAULT_URL = __ENV.VAULT_URL || 'https://vault.example.com';
    const TOKEN = __ENV.VAULT_TOKEN || 's.1234567890abcdef';
    const SECRET_PATH = __ENV.VAULT_SECRET_PATH || 'secret/data/test';
    
    export default function () {
      const url = `${VAULT_URL}/v1/${SECRET_PATH}`;
      
      const params = {
        headers: {
          'X-Vault-Token': TOKEN,
        },
      };
      
      const res = http.get(url, params);
      
      check(res, {
        'secret read success': (r) => r.status === 200,
        'secret data exists': (r) => r.json().data && r.json().data.data,
      });
      
      sleep(1);
    }
    
  keycloak-test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    
    export let options = {
      stages: [
        { duration: '1m', target: 100 },
        { duration: '2m', target: 100 },
        { duration: '1m', target: 50 },
        { duration: '2m', target: 50 },
        { duration: '1m', target: 25 },
        { duration: '2m', target: 25 },
        { duration: '1m', target: 15 },
        { duration: '2m', target: 15 },
        { duration: '1m', target: 0 },
      ],
      thresholds: {
        http_req_duration: ['p(95)<500'],
        http_req_failed: ['rate<0.1'],
      },
    };
    
    const KEYCLOAK_URL = __ENV.KEYCLOAK_URL || 'https://keycloak.example.com';
    const REALM = __ENV.KEYCLOAK_REALM || 'master';
    const CLIENT_ID = __ENV.KEYCLOAK_CLIENT_ID || 'admin-cli';
    const USERNAME = __ENV.KEYCLOAK_USER || 'admin';
    const PASSWORD = __ENV.KEYCLOAK_PASS || 'password';
    
    export default function () {
      const url = `${KEYCLOAK_URL}/realms/${REALM}/protocol/openid-connect/token`;
      
      const payload = {
        client_id: CLIENT_ID,
        username: USERNAME,
        password: PASSWORD,
        grant_type: 'password',
      };
      
      const params = {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      };
      
      const res = http.post(url, payload, params);
      
      check(res, {
        'auth success': (r) => r.status === 200,
        'access token received': (r) => r.json().access_token !== undefined,
      });
      
      sleep(1);
    }
    
  combined-test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    
    export let options = {
      stages: [
        { duration: '1m', target: 25 },
        { duration: '2m', target: 25 },
        { duration: '1m', target: 15 },
        { duration: '2m', target: 15 },
        { duration: '1m', target: 10 },
        { duration: '2m', target: 10 },
        { duration: '1m', target: 0 },
      ],
      thresholds: {
        'http_req_duration{type:harbor}': ['p(95)<500'],
        'http_req_duration{type:artifactory}': ['p(95)<500'],
        'http_req_duration{type:vault}': ['p(95)<500'],
        'http_req_duration{type:keycloak}': ['p(95)<500'],
        'http_req_failed': ['rate<0.1'],
      },
    };
    
    const HARBOR_URL = __ENV.HARBOR_URL || 'https://harbor.example.com';
    const ARTIFACTORY_URL = __ENV.ARTIFACTORY_URL || 'https://artifactory.example.com';
    const VAULT_URL = __ENV.VAULT_URL || 'https://vault.example.com';
    const KEYCLOAK_URL = __ENV.KEYCLOAK_URL || 'https://keycloak.example.com';
    
    const CREDENTIALS = {
      harbor: {
        user: __ENV.HARBOR_USER || 'admin',
        pass: __ENV.HARBOR_PASS || 'password',
        project: __ENV.HARBOR_PROJECT || 'library',
        image: __ENV.HARBOR_IMAGE || 'nginx',
        tag: __ENV.HARBOR_TAG || 'latest',
      },
      artifactory: {
        user: __ENV.ARTIFACTORY_USER || 'admin',
        pass: __ENV.ARTIFACTORY_PASS || 'password',
        repo: __ENV.ARTIFACTORY_REPO || 'generic-local',
        file: __ENV.ARTIFACTORY_FILE || 'test/testfile-30mb.bin',
      },
      vault: {
        token: __ENV.VAULT_TOKEN || 's.1234567890abcdef',
        secret: __ENV.VAULT_SECRET_PATH || 'secret/data/test',
      },
      keycloak: {
        realm: __ENV.KEYCLOAK_REALM || 'master',
        client: __ENV.KEYCLOAK_CLIENT_ID || 'admin-cli',
        user: __ENV.KEYCLOAK_USER || 'admin',
        pass: __ENV.KEYCLOAK_PASS || 'password',
      },
    };
    
    function getHarborToken() {
      const url = `${HARBOR_URL}/api/v2.0/users/login`;
      const payload = JSON.stringify({
        principal: CREDENTIALS.harbor.user,
        password: CREDENTIALS.harbor.pass
      });
      
      const params = {
        headers: {
          'Content-Type': 'application/json',
        },
      };
      
      const res = http.post(url, payload, params);
      return res.json().token;
    }
    
    function harborPull() {
      const manifestUrl = `${HARBOR_URL}/v2/${CREDENTIALS.harbor.project}/${CREDENTIALS.harbor.image}/manifests/${CREDENTIALS.harbor.tag}`;
      
      const params = {
        headers: {
          'Authorization': `Bearer ${getHarborToken()}`,
          'Accept': 'application/vnd.docker.distribution.manifest.v2+json'
        },
        tags: { type: 'harbor' },
      };
      
      const res = http.get(manifestUrl, params);
      
      check(res, {
        'harbor pull success': (r) => r.status === 200,
      });
    }
    
    function artifactoryPull() {
      const url = `${ARTIFACTORY_URL}/${CREDENTIALS.artifactory.repo}/${CREDENTIALS.artifactory.file}`;
      
      const params = {
        auth: 'basic',
        username: CREDENTIALS.artifactory.user,
        password: CREDENTIALS.artifactory.pass,
        tags: { type: 'artifactory' },
      };
      
      const res = http.get(url, params);
      
      check(res, {
        'artifactory download success': (r) => r.status === 200,
      });
    }
    
    function vaultSecret() {
      const url = `${VAULT_URL}/v1/${CREDENTIALS.vault.secret}`;
      
      const params = {
        headers: {
          'X-Vault-Token': CREDENTIALS.vault.token,
        },
        tags: { type: 'vault' },
      };
      
      const res = http.get(url, params);
      
      check(res, {
        'vault secret read success': (r) => r.status === 200,
      });
    }
    
    function keycloakAuth() {
      const url = `${KEYCLOAK_URL}/realms/${CREDENTIALS.keycloak.realm}/protocol/openid-connect/token`;
      
      const payload = {
        client_id: CREDENTIALS.keycloak.client,
        username: CREDENTIALS.keycloak.user,
        password: CREDENTIALS.keycloak.pass,
        grant_type: 'password',
      };
      
      const params = {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        tags: { type: 'keycloak' },
      };
      
      const res = http.post(url, payload, params);
      
      check(res, {
        'keycloak auth success': (r) => r.status === 200,
      });
    }
    
    export default function () {
      harborPull();
      artifactoryPull();
      vaultSecret();
      keycloakAuth();
      
      sleep(1);
    }